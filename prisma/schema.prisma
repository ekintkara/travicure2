//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@allow('all', auth().id == userId && resourcePriority == null && buildingUpgradeSequence == null)
model Account {
  id                      String    @id() @default(uuid())
  username                String
  email                   String
  passwordHash            String
  resourcePriority        String?
  buildingUpgradeSequence Json?
  userId                  String
  user                    User?     @relation("user", fields: [userId], references: [id])
  villages                Village[] @relation("account")
  tasks                   Task[]    @relation("account")
  dateCreated             DateTime  @default(now())
  dateUpdated             DateTime  @default(now()) @updatedAt()
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
/// @@allow('all', accounts?[auth().id == userId])
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  emailVerified     Boolean?
  stripeCustomerId  String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  dateCreated       DateTime           @default(now())
  dateUpdated       DateTime           @default(now()) @updatedAt()
  accounts          Account[]          @relation("user")
  sessions          Session[]
  organizationRoles OrganizationRole[]
}

/// @@allow('all', auth().id == user.id)
model Session {
  id           String   @id() @default(uuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', organization.roles?[user == auth() && name == 'owner'])
/// @@allow('create', organization.roles?[user == auth()] && name != 'owner')
/// @@allow('read', organization.roles?[user == auth()])
/// @@allow('delete', auth() == user)
model OrganizationRole {
  id             String       @id() @default(uuid())
  name           String
  dateCreated    DateTime     @default(now())
  dateUpdated    DateTime     @default(now()) @updatedAt()
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
}

/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('all', roles?[user == auth() && name == 'owner'])
/// @@allow('read', roles?[user == auth()])
model Organization {
  id               String             @id() @default(uuid())
  name             String
  pictureUrl       String?            @default("https://i.imgur.com/BgkFiid.jpeg")
  stripeCustomerId String?
  dateCreated      DateTime           @default(now())
  dateUpdated      DateTime           @default(now()) @updatedAt()
  roles            OrganizationRole[]
}

/// @@allow('all', true)
model Village {
  id          String     @id() @default(uuid())
  name        String
  coordinateX Float
  coordinateY Float
  accountId   String
  account     Account?   @relation(fields: [accountId], references: [id], name: "account")
  troops      Troop[]    @relation("village")
  resources   Resource[] @relation("village")
  buildings   Building[] @relation("village")
  dateCreated DateTime   @default(now())
  dateUpdated DateTime   @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Troop {
  id          String   @id() @default(uuid())
  type        String
  quantity    Float
  villageId   String
  village     Village? @relation(fields: [villageId], references: [id], name: "village")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Resource {
  id          String   @id() @default(uuid())
  type        String
  quantity    Float
  capacity    Float
  villageId   String
  village     Village? @relation(fields: [villageId], references: [id], name: "village")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Building {
  id          String   @id() @default(uuid())
  type        String
  level       Float
  coordinateX Float
  coordinateY Float
  villageId   String
  village     Village? @relation(fields: [villageId], references: [id], name: "village")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Task {
  id          String   @id() @default(uuid())
  type        String
  status      String
  startTime   String
  endTime     String
  accountId   String
  account     Account? @relation(fields: [accountId], references: [id], name: "account")
  dateCreated DateTime @default(now())
  dateUpdated DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model RagVector {
  id        String   @id() @default(uuid())
  key       String
  url       String
  tags      String[] @default([])
  /// @omit
  vectors   Bytes?
  /// @omit
  documents Bytes?
}
